import unittest

from service.DB.simple_db_manager import SimpleDBManager


class MyTestCase(unittest.TestCase):
    def test_is_malware_urlIsNotMalware(self):
        manager = SimpleDBManager()
        url = 'thisismalwareurl'
        self.assertEqual(False, manager.is_malware(url))

    def test_is_malware_urlIsMalware(self):
        manager = SimpleDBManager()
        url = 'thisismalwareurl'
        manager.add_malware_url(url)
        self.assertEqual(True, manager.is_malware(url))

    def test_add_malware_url_DBAddNewUrl(self):
        manager = SimpleDBManager()
        url1 = 'oldurl'
        url2 = 'newurl'
        manager.add_malware_url(url1)
        manager.add_malware_url(url2)
        data_set = manager.get_all_data()
        self.assertEqual(True, url1 in data_set)
        self.assertEqual(True, url2 in data_set)

    def test_remove_malware_url_DBDeleteUrl(self):
        manager = SimpleDBManager()
        url1 = 'oldurl'
        manager.add_malware_url(url1)
        data_set = manager.get_all_data()
        self.assertEqual(True, url1 in data_set)

        manager.delete_malware_url(url1)
        self.assertEqual(False, url1 in data_set)

    def test_update_malware_url_DBUpdateUrl(self):
        manager = SimpleDBManager()
        url1 = 'oldurl'
        url2 = 'newurl'
        manager.add_malware_url(url1)
        data_set = manager.get_all_data()
        self.assertEqual(True, url1 in data_set)

        manager.update_malware_url(url1, url2)
        self.assertEqual(False, url1 in data_set)
        self.assertEqual(True, url2 in data_set)


if __name__ == '__main__':
    unittest.main()
